{"ast":null,"code":"import { useContext, useDebugValue } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { ReactReduxContext } from '../components/Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStoreWithSelector = notInitialized;\nexport const initializeUseSelector = fn => {\n  useSyncExternalStoreWithSelector = fn;\n};\n\nconst refEquality = (a, b) => a === b;\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook() {\n  let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ReactReduxContext;\n  const useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : () => useContext(context);\n  return function useSelector(selector) {\n    let equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n\n      if (typeof equalityFn !== 'function') {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n\n    const {\n      store\n    } = useReduxContext();\n    const selectedState = useSyncExternalStoreWithSelector(store.subscribe, store.getState, // TODO Need a server-side snapshot here\n    store.getState, selector, equalityFn);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport const useSelector = /*#__PURE__*/createSelectorHook();","map":{"version":3,"sources":["/Users/kavyamandla/Desktop/react/recipe-application/client/node_modules/react-redux/es/hooks/useSelector.js"],"names":["useContext","useDebugValue","useReduxContext","useDefaultReduxContext","ReactReduxContext","notInitialized","useSyncExternalStoreWithSelector","initializeUseSelector","fn","refEquality","a","b","createSelectorHook","context","useSelector","selector","equalityFn","process","env","NODE_ENV","Error","store","selectedState","subscribe","getState"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,aAArB,QAA0C,OAA1C;AACA,SAASC,eAAe,IAAIC,sBAA5B,QAA0D,mBAA1D;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,IAAIC,gCAAgC,GAAGD,cAAvC;AACA,OAAO,MAAME,qBAAqB,GAAGC,EAAE,IAAI;AACzCF,EAAAA,gCAAgC,GAAGE,EAAnC;AACD,CAFM;;AAIP,MAAMC,WAAW,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,KAAKC,CAApC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASC,kBAAT,GAAyD;AAAA,MAA7BC,OAA6B,uEAAnBT,iBAAmB;AAC9D,QAAMF,eAAe,GAAGW,OAAO,KAAKT,iBAAZ,GAAgCD,sBAAhC,GAAyD,MAAMH,UAAU,CAACa,OAAD,CAAjG;AACA,SAAO,SAASC,WAAT,CAAqBC,QAArB,EAAyD;AAAA,QAA1BC,UAA0B,uEAAbP,WAAa;;AAC9D,QAAIQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAI,CAACJ,QAAL,EAAe;AACb,cAAM,IAAIK,KAAJ,CAAW,yCAAX,CAAN;AACD;;AAED,UAAI,OAAOL,QAAP,KAAoB,UAAxB,EAAoC;AAClC,cAAM,IAAIK,KAAJ,CAAW,uDAAX,CAAN;AACD;;AAED,UAAI,OAAOJ,UAAP,KAAsB,UAA1B,EAAsC;AACpC,cAAM,IAAII,KAAJ,CAAW,iEAAX,CAAN;AACD;AACF;;AAED,UAAM;AACJC,MAAAA;AADI,QAEFnB,eAAe,EAFnB;AAGA,UAAMoB,aAAa,GAAGhB,gCAAgC,CAACe,KAAK,CAACE,SAAP,EAAkBF,KAAK,CAACG,QAAxB,EAAkC;AACxFH,IAAAA,KAAK,CAACG,QADgD,EACtCT,QADsC,EAC5BC,UAD4B,CAAtD;AAEAf,IAAAA,aAAa,CAACqB,aAAD,CAAb;AACA,WAAOA,aAAP;AACD,GAtBD;AAuBD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMR,WAAW,GAAG,aAAaF,kBAAkB,EAAnD","sourcesContent":["import { useContext, useDebugValue } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport { ReactReduxContext } from '../components/Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStoreWithSelector = notInitialized;\nexport const initializeUseSelector = fn => {\n  useSyncExternalStoreWithSelector = fn;\n};\n\nconst refEquality = (a, b) => a === b;\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook(context = ReactReduxContext) {\n  const useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : () => useContext(context);\n  return function useSelector(selector, equalityFn = refEquality) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`);\n      }\n\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`);\n      }\n\n      if (typeof equalityFn !== 'function') {\n        throw new Error(`You must pass a function as an equality function to useSelector`);\n      }\n    }\n\n    const {\n      store\n    } = useReduxContext();\n    const selectedState = useSyncExternalStoreWithSelector(store.subscribe, store.getState, // TODO Need a server-side snapshot here\n    store.getState, selector, equalityFn);\n    useDebugValue(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport const useSelector = /*#__PURE__*/createSelectorHook();"]},"metadata":{},"sourceType":"module"}